# log4Rich Demo Configuration
# Use this file as a template for your own log4Rich configuration
# Copy to 'log4Rich.config' or use with -Dlog4rich.config=log4Rich.demo.config

# =============================================================================
# BASIC CONFIGURATION
# =============================================================================

# Root logger level - controls default logging level for all loggers
# Values: TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF
log4rich.rootLevel=INFO

# =============================================================================
# CONSOLE LOGGING CONFIGURATION
# =============================================================================

# Enable/disable console logging
log4rich.console.enabled=true

# Console target: STDOUT or STDERR
log4rich.console.target=STDOUT

# Console log level (optional - defaults to root level)
log4rich.console.level=INFO

# Console message pattern
log4rich.console.pattern=[%level] %date{yyyy-MM-dd HH:mm:ss} [%thread] %class.%method:%line - %message%n

# =============================================================================
# FILE LOGGING CONFIGURATION
# =============================================================================

# Enable/disable file logging
log4rich.file.enabled=true

# Log file path
log4rich.file.path=logs/application.log

# File log level (optional - defaults to root level)
log4rich.file.level=DEBUG

# File message pattern (more detailed than console)
log4rich.file.pattern=[%level] %date{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %class.%method:%line - %message%n

# File rolling configuration
log4rich.file.maxSize=10M
log4rich.file.maxBackups=10
log4rich.file.datePattern=yyyy-MM-dd-HH-mm-ss

# File I/O settings
log4rich.file.encoding=UTF-8
log4rich.file.bufferSize=8192
log4rich.file.immediateFlush=true

# =============================================================================
# COMPRESSION CONFIGURATION
# =============================================================================

# Enable compression of rolled files
log4rich.file.compress=true

# Compression program (gzip, bzip2, xz, zip, 7z, or custom)
log4rich.file.compress.program=gzip

# Additional compression arguments
log4rich.file.compress.args=

# ASYNCHRONOUS COMPRESSION (NEW IN v1.1.0)
# Enable async compression for non-blocking log rotation (recommended)
log4rich.file.compress.async=true

# Async compression queue size - maximum files queued for compression
log4rich.file.compress.async.queueSize=100

# Number of background compression threads
log4rich.file.compress.async.threads=2

# Compression timeout in milliseconds
log4rich.file.compress.async.timeout=30000

# ADAPTIVE COMPRESSION MANAGEMENT
# When log rotation outpaces compression, the system will:
# 1. Detect queue overflow condition
# 2. Temporarily block to prevent memory exhaustion
# 3. Automatically DOUBLE the file size limit
# 4. Log the change in CAPITAL LETTERS in the log file
# This prevents system instability during high-volume logging

# =============================================================================
# JSON STRUCTURED LOGGING (NEW IN v1.1.0)
# =============================================================================

# Enable JSON layout for structured logging
# Perfect for log analysis tools like ELK Stack, Splunk, etc.
log4rich.json.enabled=false

# Pretty print JSON (true for development, false for production)
# Pretty: formatted with indentation and newlines
# Compact: single line for better performance and storage
log4rich.json.prettyPrint=false

# Include location information (class, method, file, line)
# Disable in production for better performance
log4rich.json.includeLocation=true

# Include thread information in JSON output
log4rich.json.includeThread=true

# Timestamp format for JSON logs (ISO 8601 recommended)
# Examples:
#   yyyy-MM-dd'T'HH:mm:ss.SSSXXX  (ISO 8601 with timezone)
#   yyyy-MM-dd'T'HH:mm:ss.SSS'Z'  (UTC format)
#   yyyy/MM/dd HH:mm:ss.SSS       (Custom format)
log4rich.json.timestampFormat=yyyy-MM-dd'T'HH:mm:ss.SSSXXX

# ADDITIONAL STATIC FIELDS
# Add consistent metadata to all JSON log entries
# Perfect for microservices, containers, and distributed systems

# Application identification
log4rich.json.additionalFields.application=MyApplication
log4rich.json.additionalFields.version=1.0.0
log4rich.json.additionalFields.component=web-service

# Environment and deployment information
log4rich.json.additionalFields.environment=production
log4rich.json.additionalFields.datacenter=us-east-1
log4rich.json.additionalFields.cluster=prod-cluster-01

# EXAMPLE JSON OUTPUT (compact):
# {"timestamp":"2025-07-19T15:30:45.123-05:00","level":"INFO","logger":"com.myapp.UserService","message":"User john.doe logged in","thread":"http-nio-8080-exec-1","location":{"class":"com.myapp.UserService","method":"login","file":"UserService.java","line":42},"application":"MyApplication","version":"1.0.0","environment":"production"}

# EXAMPLE JSON OUTPUT (pretty):
# {
#   "timestamp": "2025-07-19T15:30:45.123-05:00",
#   "level": "INFO", 
#   "logger": "com.myapp.UserService",
#   "message": "User john.doe logged in",
#   "thread": "http-nio-8080-exec-1",
#   "location": {
#     "class": "com.myapp.UserService",
#     "method": "login",
#     "file": "UserService.java",
#     "line": 42
#   },
#   "application": "MyApplication",
#   "version": "1.0.0",
#   "environment": "production"
# }

# JSON CONFIGURATION PROFILES:
# 
# DEVELOPMENT PROFILE (readable, full information):
# log4rich.json.enabled=true
# log4rich.json.prettyPrint=true
# log4rich.json.includeLocation=true  
# log4rich.json.includeThread=true
#
# PRODUCTION PROFILE (compact, high performance):
# log4rich.json.enabled=true
# log4rich.json.prettyPrint=false
# log4rich.json.includeLocation=false
# log4rich.json.includeThread=true
#
# MINIMAL PROFILE (essential fields only):
# log4rich.json.enabled=true
# log4rich.json.prettyPrint=false
# log4rich.json.includeLocation=false
# log4rich.json.includeThread=false

# =============================================================================
# PERFORMANCE CONFIGURATION (NEW IN v1.1.0)
# =============================================================================

# Memory-mapped file I/O (5.4x faster) - Recommended for low-latency applications
log4rich.performance.memoryMapped=false
log4rich.performance.mappedSize=64M
log4rich.performance.forceOnWrite=false
log4rich.performance.forceInterval=1000

# Batch processing (23x faster multi-threaded) - Recommended for high-throughput applications
log4rich.performance.batchEnabled=false
log4rich.performance.batchSize=1000
log4rich.performance.batchTimeMs=100

# Zero-allocation logging - Recommended for GC-sensitive applications
log4rich.performance.zeroAllocation=false
log4rich.performance.stringBuilderCapacity=1024

# =============================================================================
# ADVANCED CONFIGURATION
# =============================================================================

# Location information capture (class, method, line number)
# Disable in production for better performance
log4rich.location.capture=true

# Thread synchronization timeout
log4rich.thread.lockTimeout=5000

# Logger name formatting
log4rich.truncateLoggerNames=false
log4rich.maxLoggerNameLength=30
log4rich.class.format=SIMPLE

# =============================================================================
# LOGGER-SPECIFIC CONFIGURATION
# =============================================================================

# Set specific levels for different packages/classes
# Format: log4rich.logger.{logger.name}={LEVEL}

# Example: Set all database operations to DEBUG
log4rich.logger.com.myapp.dao=DEBUG

# Example: Set security components to WARN (less verbose)
log4rich.logger.com.myapp.security=WARN

# Example: Set performance-critical components to ERROR only
log4rich.logger.com.myapp.performance=ERROR

# Example: Enable detailed logging for specific service
log4rich.logger.com.myapp.service.UserService=TRACE

# =============================================================================
# PRODUCTION CONFIGURATION EXAMPLES
# =============================================================================

# High-Performance Production Setup:
# log4rich.rootLevel=WARN
# log4rich.location.capture=false
# log4rich.performance.batchEnabled=true
# log4rich.performance.batchSize=2000
# log4rich.file.immediateFlush=false
# log4rich.file.compress.async=true
# log4rich.file.compress.async.threads=4

# Low-Latency Production Setup:
# log4rich.rootLevel=ERROR
# log4rich.location.capture=false
# log4rich.performance.memoryMapped=true
# log4rich.performance.mappedSize=128M
# log4rich.file.compress.async=true
# log4rich.file.compress.async.queueSize=50

# Development Setup:
# log4rich.rootLevel=DEBUG
# log4rich.console.enabled=true
# log4rich.file.enabled=true
# log4rich.location.capture=true
# log4rich.file.compress.async=true

# High-Volume Logging Setup (with compression overload protection):
# log4rich.rootLevel=INFO
# log4rich.file.maxSize=50M
# log4rich.file.compress.async=true
# log4rich.file.compress.async.queueSize=200
# log4rich.file.compress.async.threads=4
# log4rich.file.compress.async.timeout=60000

# =============================================================================
# ENVIRONMENT VARIABLE CONFIGURATION (NEW IN v1.0.0)
# =============================================================================

# Override any configuration property using environment variables
# Environment variables take precedence over file-based configuration
# Format: LOG4RICH_{PROPERTY_NAME_IN_UPPERCASE}

# Examples of environment variable overrides:
# export LOG4RICH_ROOT_LEVEL=DEBUG              → log4rich.rootLevel=DEBUG
# export LOG4RICH_CONSOLE_ENABLED=false         → log4rich.console.enabled=false
# export LOG4RICH_FILE_PATH=/var/log/myapp.log  → log4rich.file.path=/var/log/myapp.log
# export LOG4RICH_FILE_MAX_SIZE=100M            → log4rich.file.maxSize=100M
# export LOG4RICH_LOCATION_CAPTURE=false        → log4rich.location.capture=false

# Containerized Applications (Docker/Kubernetes):
# ENV LOG4RICH_ROOT_LEVEL=INFO
# ENV LOG4RICH_CONSOLE_ENABLED=true
# ENV LOG4RICH_FILE_ENABLED=false
# ENV LOG4RICH_LOCATION_CAPTURE=false

# CI/CD Pipeline Overrides:
# LOG4RICH_ROOT_LEVEL=DEBUG mvn test
# LOG4RICH_FILE_PATH=/tmp/ci-logs/test.log mvn test

# Production Environment Variables:
# export LOG4RICH_ROOT_LEVEL=WARN
# export LOG4RICH_PERFORMANCE_BATCH_ENABLED=true
# export LOG4RICH_FILE_COMPRESS_ASYNC=true
# export LOG4RICH_FILE_COMPRESS_ASYNC_THREADS=4
# export LOG4RICH_JSON_ENABLED=true
# export LOG4RICH_JSON_PRETTY_PRINT=false
# export LOG4RICH_JSON_INCLUDE_LOCATION=false

# Supported Environment Variables:
# LOG4RICH_ROOT_LEVEL, LOG4RICH_CONSOLE_ENABLED, LOG4RICH_CONSOLE_TARGET
# LOG4RICH_CONSOLE_LEVEL, LOG4RICH_CONSOLE_PATTERN, LOG4RICH_FILE_ENABLED  
# LOG4RICH_FILE_PATH, LOG4RICH_FILE_LEVEL, LOG4RICH_FILE_PATTERN
# LOG4RICH_FILE_MAX_SIZE, LOG4RICH_FILE_MAX_BACKUPS, LOG4RICH_FILE_COMPRESS
# LOG4RICH_FILE_COMPRESS_PROGRAM, LOG4RICH_FILE_COMPRESS_ARGS
# LOG4RICH_LOCATION_CAPTURE, LOG4RICH_PERFORMANCE_MEMORY_MAPPED
# LOG4RICH_PERFORMANCE_BATCH_ENABLED, LOG4RICH_ASYNC_ENABLED
# LOG4RICH_ASYNC_BUFFER_SIZE, LOG4RICH_ASYNC_OVERFLOW_STRATEGY
# LOG4RICH_JSON_ENABLED, LOG4RICH_JSON_PRETTY_PRINT (NEW v1.1.0)
# LOG4RICH_JSON_INCLUDE_LOCATION, LOG4RICH_JSON_INCLUDE_THREAD (NEW v1.1.0)
# LOG4RICH_JSON_TIMESTAMP_FORMAT (NEW v1.1.0)
# And many more... (see ConfigLoader.getSupportedEnvironmentVariables())

# =============================================================================
# CONFIGURATION SEARCH ORDER
# =============================================================================
# log4Rich searches for configuration files in this order:
# 1. System Property: -Dlog4rich.config=/path/to/config
# 2. Classpath: log4Rich.config (root of classpath)
# 3. Current Directory: ./log4Rich.config
# 4. Parent Directory: ../log4Rich.config
# 5. Config Directories:
#    - ./config/log4Rich.config
#    - ./conf/log4Rich.config
#    - ../config/log4Rich.config
#    - ../conf/log4Rich.config
# 6. Environment variable overrides are applied AFTER file loading